# Generated by Django 2.2.2 on 2020-12-30 09:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="EmailUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="Email ID"
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("admin", "admin"),
                            ("laboratory", "laboratory"),
                            ("dentist", "dentist"),
                            ("accountant", "accountant"),
                        ],
                        default="admin",
                        max_length=12,
                    ),
                ),
                ("is_email_verified", models.BooleanField(default=False)),
                ("mobile", models.BigIntegerField(default=0)),
                ("is_mobile_verified", models.BooleanField(default=False)),
                (
                    "mobile_verified_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email User",
                "verbose_name_plural": "Email Users",
            },
            managers=[("objects", users.managers.UserManager()),],
        ),
        migrations.CreateModel(
            name="MobileToken",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("mobile", models.BigIntegerField()),
                ("token", models.IntegerField()),
                ("expiry", models.DateTimeField()),
                ("is_used", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Mobile Token",
                "verbose_name_plural": "Mobile Tokens",
            },
        ),
        migrations.CreateModel(
            name="State",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("gst_code", models.IntegerField()),
            ],
            options={"verbose_name": "State", "verbose_name_plural": "States",},
        ),
        migrations.CreateModel(
            name="EmailUserAddress",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("gstin", models.CharField(blank=True, max_length=15, null=True)),
                ("name", models.CharField(max_length=255)),
                ("address", models.TextField()),
                ("city", models.CharField(max_length=255)),
                ("pincode", models.CharField(max_length=6)),
                (
                    "address_type",
                    models.CharField(
                        choices=[("billing", "billing"), ("shipping", "shipping")],
                        default="billing",
                        max_length=8,
                    ),
                ),
                ("is_default", models.BooleanField(default=True)),
                (
                    "state",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="addresses",
                        to="users.State",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addresses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "EmailUser Address",
                "verbose_name_plural": "EmailUser Addresses",
                "ordering": ["user", "address_type"],
            },
        ),
        migrations.CreateModel(
            name="BankAccount",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("account_name", models.CharField(max_length=255)),
                ("account_number", models.CharField(max_length=255)),
                ("bank_name", models.CharField(max_length=255)),
                ("ifsc_code", models.CharField(max_length=11)),
                (
                    "account_type",
                    models.CharField(
                        choices=[("current", "current"), ("savings", "savings")],
                        default="current",
                        max_length=255,
                    ),
                ),
                (
                    "email_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bank_accounts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Bank Account",
                "verbose_name_plural": "Bank Accounts",
            },
        ),
        migrations.CreateModel(
            name="ResetPasswordToken",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("token", models.UUIDField()),
                ("expiry", models.DateTimeField()),
                ("is_used", models.BooleanField(default=False)),
                (
                    "email_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reset_password_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Reset Password Token",
                "verbose_name_plural": "Reset Password Tokens",
                "unique_together": {("email_user", "token")},
            },
        ),
    ]
